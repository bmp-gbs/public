Sub CombineWorkbooksAndStoreUniqueFilenames()
    Dim SourceFolder As String
    Dim SourceFile As String
    Dim CurrentWorkbook As Workbook
    Dim SourceWorkbook As Workbook
    Dim SourceWorksheet As Worksheet
    Dim TargetWorksheet As Worksheet
    Dim LastRow As Long
    Dim SkipRows As Long
    Dim FileName As String ' Variable to store the current filename
    Dim LastColumn As Long ' Variable to store the last used column
    Dim UniqueFilenames As Collection ' Collection to store unique filenames
    
    ' Set the folder containing the source files (change as needed)
    SourceFolder = ThisWorkbook.Path
    
    ' Set the number of rows to skip in each file (default: 6)
    SkipRows = 6
    
    ' Set the target worksheet where data will be combined
    Set TargetWorksheet = ThisWorkbook.ActiveSheet
    
    ' Initialize the collection to store unique filenames
    Set UniqueFilenames = New Collection
    
    ' Loop through each file in the source folder
    SourceFile = Dir(SourceFolder & "\*.xlsx")
    Do While SourceFile <> ""
        ' Check if the current file is not the active workbook
        If SourceFile <> ThisWorkbook.Name Then
            Set SourceWorkbook = Workbooks.Open(SourceFolder & "\" & SourceFile)
            Set SourceWorksheet = SourceWorkbook.Sheets(1)
            
            ' Find the last row in the target worksheet
            LastRow = TargetWorksheet.Cells(TargetWorksheet.Rows.Count, "A").End(xlUp).Row
            
            ' Get the filename without path
            FileName = SourceFile
            
            ' Store the filename in the collection if it's not already there
            On Error Resume Next
            UniqueFilenames.Add FileName, FileName
            On Error GoTo 0
            
            ' Copy data from source worksheet and paste in target worksheet
            SourceWorksheet.Range("A" & SkipRows + 1 & ":Z" & SourceWorksheet.Cells(SourceWorksheet.Rows.Count, "A").End(xlUp).Row).Copy _
                Destination:=TargetWorksheet.Range("A" & LastRow + 1)
            
            ' Paste the filename in the right-most column of the pasted range
            TargetWorksheet.Range("AA1").Value = "Filename" ' Insert the header
            TargetWorksheet.Range("AA" & LastRow + 1 & ":AA" & LastRow + SourceWorksheet.Cells(SourceWorksheet.Rows.Count, "A").End(xlUp).Row).Value = FileName
            
            ' SourceWorkbook.Close False ' Close the source workbook without saving
        End If
        SourceFile = Dir
    Loop
    
    ' Find the last used column in the target worksheet
    LastColumn = TargetWorksheet.Cells(1, TargetWorksheet.Columns.Count).End(xlToLeft).Column

    ' Find the first empty column from the right
    Dim EmptyColumn As Long
    EmptyColumn = LastColumn + 1

    ' Loop through the unique filenames and place them in Row 1
    Dim UniqueFileName As Variant
    For Each UniqueFileName In UniqueFilenames
        TargetWorksheet.Cells(1, EmptyColumn).Value = UniqueFileName
        EmptyColumn = EmptyColumn + 1
    Next UniqueFileName
    
    ' Find the column index for the column titled "Filename"
    Dim FilenameColumnIndex As Long
    On Error Resume Next
    FilenameColumnIndex = WorksheetFunction.Match("Filename", TargetWorksheet.Rows(1), 0)
    On Error GoTo 0
    
    If FilenameColumnIndex > 0 Then
        Debug.Print "The column titled 'Filename' is in column " & FilenameColumnIndex
    Else
        Debug.Print "The column titled 'Filename' was not found."
    End If
    
    ' Loop through each row and copy value from column "Q" to respective unique filename column
    Dim RowIndex As Long
    For RowIndex = 2 To LastRow ' Assuming data starts from row 2
        Dim FilenameItem As String
        FilenameItem = TargetWorksheet.Cells(RowIndex, FilenameColumnIndex).Value
        
        If FilenameItem <> "" Then
            Dim FilenameColumn As Long
            FilenameColumn = WorksheetFunction.Match(FilenameItem, TargetWorksheet.Rows(1), 0)
            
            If FilenameColumn > 0 Then
                TargetWorksheet.Cells(RowIndex, FilenameColumn).Value = TargetWorksheet.Cells(RowIndex, "Q").Value
            End If
        End If

    Next RowIndex

    ' Delete columns "M" through "P" and "U" through "AA"
    TargetWorksheet.Range("M:P,U:AA").Delete

    ' Add "CCI" header to cell G1
    TargetWorksheet.Range("G1").Value = "CCI"

    ' Cycle through each row and perform the comparison and overwrite logic
    Dim RowIndexCurrent As Long
    For RowIndexCurrent = 2 To LastRow ' Start from row 2

        Dim CompareValue As String
        CompareValue = TargetWorksheet.Cells(RowIndexCurrent, "G").Value

        Dim RowIndexCompare As Long
        For RowIndexCompare = 2 To LastRow ' Compare with all other rows

            ' Skip comparing the current row with itself
            If RowIndexCompare <> RowIndexCurrent Then

                Dim CompareValueOther As String
                CompareValueOther = TargetWorksheet.Cells(RowIndexCompare, "G").Value

                ' Compare the values in column G
                If CompareValue = CompareValueOther Then

                    ' Cycle through each cell in the row and perform the length check
                    Dim ColumnIndex As Long
                    For ColumnIndex = 1 To LastColumn

                        Dim CurrentCell As Range
                        Set CurrentCell = TargetWorksheet.Cells(RowIndexCurrent, ColumnIndex)

                        Dim OtherCell As Range
                        Set OtherCell = TargetWorksheet.Cells(RowIndexCompare, ColumnIndex)

                        ' Check if the other cell's value is longer and overwrite if necessary
                        If Len(OtherCell.Value) > Len(CurrentCell.Value) Then
                            CurrentCell.Value = OtherCell.Value
                        End If

                    Next ColumnIndex

                End If

            End If

        Next RowIndexCompare

    Next RowIndexCurrent

' Remove duplicate rows based on values in column G
Dim RowIndexToDelete_Duplicates As Long
Dim DuplicateFound_Duplicates As Boolean

Do
    DuplicateFound_Duplicates = False
    
    For RowIndexToDelete_Duplicates = LastRow To 2 Step -1 ' Start from the last row and move upwards
        Dim ValueToCheck_Duplicates As String
        ValueToCheck_Duplicates = CStr(TargetWorksheet.Cells(RowIndexToDelete_Duplicates, "G").Value)
        
        ' Check if the value is already encountered in a previous row
        Dim CheckRowIndex_Duplicates As Long
        For CheckRowIndex_Duplicates = RowIndexToDelete_Duplicates - 1 To 2 Step -1
            If CStr(TargetWorksheet.Cells(CheckRowIndex_Duplicates, "G").Value) = ValueToCheck_Duplicates Then
                DuplicateFound_Duplicates = True
                Exit For
            End If
        Next CheckRowIndex_Duplicates
        
        ' If a duplicate is found, delete the current row and exit the loop
        If DuplicateFound_Duplicates Then
            TargetWorksheet.Rows(RowIndexToDelete_Duplicates).Delete
            Exit For
        End If
    Next RowIndexToDelete_Duplicates
Loop While DuplicateFound_Duplicates

End Sub
